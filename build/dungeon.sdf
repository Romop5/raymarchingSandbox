// Simple Dungeon
// Created By Roman Dobias

// Textures, generated using QTA - https://romop5.github.io/QuantitizeThemAll
float procTexture(vec3 pos)
{
    float x = pos.x;
    float y = pos.z;
    //float d = x*sin(mod(5.71,0.90))*mod(tan(tan(1.63)*x*tan(x)*tan(5.89*0.63)*y*mod(mod(11.41+tan(sin(tan(x))),53.43),16.69)*x+sin(y)),6.29);
    //float d = sin(tan(x+x*mod(x,16.79)))*tan(mod(17.57*y,3.34))+sin(sin(tan(x))*x*tan(x));
    //float d =sin(x)*3.13*y+sin(pow(12.88*y+sin(sin(sin(pow(x,pow(pow(x,x),y)))))+25.84,y))+5.77*pow(22.37,pow(x,pow(sin(13.77*y),x+pow(4.04*x,1.91)*43.71)+x))*x+1.46*3.05+y;
    float d =sin(sin(sin(sin(y*y*sin(sin(x)))+y)*x*6.80+y*sin(y*24.91)));
    return d;
}

float cone(vec3 pos, float a, float e)
{
    vec3 n = normalize(vec3(0.0,1.0,0.0));
    vec3 c = dot(n, pos)*n;
    float s = abs(0.3*pow(sin(pos.y*2.3),0.1));
    float d = length(c-pos)-s;
    d -= 0.3;
    return d;
}

float simpleNoise(vec3 pos)
{
    return fract(length(cos(pos*2.0)+sin(pos*50.0)));
}

vec4 df(vec3 pos)
{
    vec3 newPos = pos;
    float k = 5.0;
    // Repeat space XYZ with K as period
    newPos = mod(pos+vec3(k*0.5), vec3(k))-vec3(0.5*k);
    // Create column
    float d = cone(newPos, 0.4, 0.5);

    // Remove columns
    d = max(d, -cube(pos*vec3(1.0,0.1,0.7), 1.0));
    
    // Bound room into limited cube
    d = min(d, -cube(pos, 20.0));

    // Compute ground
    vec4 gd = ground(pos, -0.3);
    // Intersect ground with sphere (pool)
    gd.x = max(gd.x, -sphere(pos, 3.0));
    d = min(d, gd.x);
    
    // Union with flying sphere
    d = min(d, sphere(pos-vec3(-0.0, 1.0+2.0*sin(iTime),0), 1.1));
    
    // Use noise to compute final texture
    float t = simpleNoise(pos);
    vec3 color = mix(vec3(0.70,0.70,0.70),vec3(0.82,0.81, 0.80), t);
    return unite(gd, vec4(d, color));
}
        
